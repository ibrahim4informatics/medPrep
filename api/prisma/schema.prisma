generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String        @id @default(uuid())
  full_name String        @db.VarChar(125)
  email     String        @unique
  password  String?
  guid      String?       @unique
  modules   UserModules[]
  results   ExamResult[]
  isAdmin   Boolean       @default(false)
}

model Exam {
  id          Int          @id @default(autoincrement())
  title       String       @db.VarChar(125)
  module      Module       @relation(fields: [mid], references: [id], onDelete: Cascade)
  mid         Int
  examResults ExamResult[]
  questions   Question[]
  createdAt   DateTime     @default(now())
}

model Module {
  id    Int           @id @default(autoincrement())
  name  String        @db.VarChar(125)
  users UserModules[]
  exams Exam[]
}

model Question {
  id      Int      @id @default(autoincrement())
  content String   @db.LongText
  choices Choice[]
  exam    Exam     @relation(fields: [exam_id], references: [id], onDelete: Cascade)
  exam_id Int
}

model Choice {
  id        Int      @id @default(autoincrement())
  content   String   @db.LongText
  isCorrect Boolean
  question  Question @relation(fields: [qid], references: [id], onDelete: Cascade)
  qid       Int
}

model UserModules {
  id      Int    @id @default(autoincrement())
  user    User   @relation(fields: [uid], references: [id], onDelete: Cascade)
  module Module @relation(fields: [mid], references: [id], onDelete: Cascade)
  mid     Int
  uid     String
}

model ExamResult {
  id        Int      @id @default(autoincrement())
  exam      Exam     @relation(fields: [exam_id], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [uid], references: [id], onDelete: Cascade)
  uid       String
  score     Float  @db.Float
  exam_id   Int
  createdAt DateTime @default(now())
}
